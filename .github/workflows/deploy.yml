name: Build, Push to ECR Public, and Deploy to EC2
on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: ["gatewayAppTestA", "inventoryServiceTestA"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Build service (Maven or Gradle)
        run: |
          cd ${{ matrix.service }}
          if [ -f "mvnw" ]; then
            chmod +x mvnw
            ./mvnw clean package -DskipTests
          elif [ -f "gradlew" ]; then
            chmod +x gradlew
            ./gradlew build -x test
          else
            echo "No Maven or Gradle wrapper found in ${{ matrix.service }}"
            exit 1
          fi

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Log in to Amazon ECR Public
        run: |
          aws ecr-public get-login-password --region null | docker login --username AWS --password-stdin public.ecr.aws

      - name: Build & Push Docker Image
        run: |
          cd ${{ matrix.service }}
          docker build -t public.ecr.aws/c4d3l3m6/${{ matrix.service }}:latest .
          docker push public.ecr.aws/c4d3l3m6/${{ matrix.service }}:latest

  deploy-to-ec2:
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: SSH into EC2 & pull all images and restart stack
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > ~/.ssh/ec2-keypair.pem
          chmod 600 ~/.ssh/ec2-keypair.pem
          ssh-keyscan -H ${{ secrets.EC2_IP }} >> ~/.ssh/known_hosts
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/ec2-keypair.pem ubuntu@${{ secrets.EC2_IP }} <<'EOF'
            set -e
            sudo apt-get update -y
            sudo apt-get install -y docker.io docker-compose
            sudo systemctl enable --now docker
            docker pull public.ecr.aws/c4d3l3m6/gatewayAppTestA:latest
            docker pull public.ecr.aws/c4d3l3m6/inventoryServiceTestA:latest
            docker-compose down || true
            docker-compose up -d --force-recreate
          EOF
